---
date: 2025/01/24
date-format: long
date-modified: last-modified
sidebar: true
---

# Contribute

The **VegVault** project is envisioned as database that will undergo updates for further improvement.

We appreciate the help :sparkling_heart: and thank you just for considering contributing to **VegVault**.

To make sure that we maintain the highest quality of data and code, we do have to adhere to some strict guidelines though Please read through this document to help you get up and running.

If you would like to report a bug, suggest enhancements, or request a new feature, jump to the [Issues section](/website/contact.qmd#it-does-not-work).

## Data Contribution

We are continuously looking for new data to be included in **VegVault**. If know about data that you would like to add to the next version of **VegVault**, please contact us! See [Get in touch](/website/contact.qmd) for more information.

## Code Contribution

### Git + GitHub

We use the [Git](https://git-scm.com/) version control system to manage the developments in the repository hosted on [GitHub](https://github.com). If you are new to Git or GitHub, please read through the [GitHub Bootcamp](https://help.github.com/categories/bootcamp/) to get up to speed.

If you are already familiar with Git and GitHub, please read [Submitting Pull Requests](#submitting-pull-requests).

### Coding Style Guidelines

While we do have our style in coding and haven't followed any standards available on the web, we do maintain some uniformity. Specifically, we use the following [Code Convetions](https://ondrejmottl.github.io/collaboration/code_convention.html#coding-style).

### Submitting Pull Requests

All changes to VegVault must be in the form of a **pull request** (also known as a PR). If you are unfamiliar with pull requests, please read [this](https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project>).

Here is the recommended process:

1. Fork the repo so that you can make your changes without affecting the original project until you are ready to merge them. Check out the [Guide to forking](https://docs.github.com/en/get-started/quickstart/fork-a-repo#fork-an-example-repository)
2. Check out the branch (named the next version; if there is one).
3. Commit your updates once you are happy with them. See contributing [guide](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages) for commit messages.
4. When you are finished with the changes, create a PR
   * Click the "Ready for review" so that we can review your PR. This template helps reviewers understand your changes as well as the purpose of your pull request.
   * Don't forget to [link PR to the Issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) if you are solving one.
   * Enable the checkbox to [allow maintainer edits](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork) so that the branch can be updated for a merge. Once you submit your PR, a HOPE team member will review your proposal. We may ask questions or request additional information.
   * We may ask for changes to be made before a PR can be merged, either using suggested changes or pull request comments. You can apply suggested changes directly through the user interface (UI). You can make any other changes in your fork, and then commit them to your branch. As you update your PR and apply changes, mark each conversation as [resolved](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#resolving-conversations)
   * If you run into any merge issues, check out this [git tutorial](https://lab.github.com/githubtraining/managing-merge-conflicts) to help you resolve merge conflicts and other issues.

Before submitting a pull request, please make sure you follow all the guidelines
below while working on your changes:

* Each pull request should try to accomplish one general task.
* All work should be done on a branch with a descriptive name relating to the
  general task (eg. `fix_bug_x` or `add_feature_y`). Each commit should accomplish one small sub-task and should be explainable in a sentence or two.
* Each commit should have a descriptive commit message.
* You should make sure your code passes all tests before committing.