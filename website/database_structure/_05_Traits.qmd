## Traits 

```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("website/database_structure/_05_Traits.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

source(
  here::here(
    "R/03_Visualisation/00_Config_quarto.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)
```

### Traits Structure Overview (`Traits`)

The **Traits** table contains the list of functional traits currently contained in **VegVault**. The table contains one `Trait` per row, with each `Trait` containing: a unique Trait ID (`trait_id`), original Trait name from primary source (`trait_name`), and Trait Domain (`trait_domain_id`). Functional traits of vegetation taxa follow the same structure of `Dataset` and `Samples` obtained directly from `Dataset` `Source-Types`.

```{r}
#| label: Traits variables scheme structure
#| tbl-cap: "Column names and types for table Traits."
data_comments_traits <-
  tibble::tribble(
    ~column_name, ~description,
    "trait_id", "ID of a Trait (unique)",
    "trait_domain_id", "ID of a Trait Domain",
    "trait_name", "Name of the trait from the primary source. See 'VegVault Content' for the details about the specific columns used from primary sources."
  )

get_db_table_data_types(
  con,
  "Traits"
) %>%
  dplyr::full_join(
    data_comments_traits,
    by = "column_name"
  ) %>%
  plot_table()
```

```{r}
#| label: Traits scheme structure
include_graphics_absolute_path(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/Traits.png"
  )
)
```

### Traits Domain (`TraitsDomain`)

Traits are grouped into `Trait Domains` to allow for easier aggregation of `Traits` across data sources. As there are differences in trait names across sources of data and individual `Datasets`, the **VegVault** database contains `Trait Domain` information to group traits together. In total, six `Trait Domains` are present: `Stem specific density`, `Leaf nitrogen content per unit mass`, `Diaspore mass`, `Plant height`, `Leaf area`, `Leaf mass per area`, following [Diaz et al. (2016)](https://www.nature.com/articles/nature16489). Yet, it is up to the user to decide how to further aggregate trait values if multiple trait `Samples` of one `Trait Domain` are available for the same environmental or taxonomic entity. 

```{r}
#| label: show trait domains
dplyr::tbl(con, "TraitsDomain") %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsValue"),
    by = "trait_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets") %>%
      dplyr::filter(dataset_type_id == 3),
    by = "dataset_id"
  ) %>%
  dplyr::distinct(
    trait_domain_id, trait_domain_name,
    trait_name,
    data_source_type_id, dataset_id
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::distinct(
    trait_domain_id, trait_domain_name,
    trait_name,
    dataset_source_type
  ) %>%
  dplyr::collect() %>%
  dplyr::arrange(trait_domain_id, dataset_source_type) %>%
  dplyr::select(-trait_domain_id) %>%
  rlang::set_names(
    nm = c(
      "Trait domain",
      "Trait",
      "Data Source"
    )
  ) %>%
  plot_table()
```

```{r}
#| label: TraitsDomain variables scheme structure
#| tbl-cap: "Column names and types for table TraitsDomain."
data_comments_traits_domain <-
  tibble::tribble(
    ~column_name, ~description,
    "trait_domain_id", "ID of a Trait Domain (unique)",
    "trait_domain_name", "Name of the Trait Domain from Diaz et al. (2016)",
    "trait_domain_description", "Additional information about the Trait Domain"
  )
get_db_table_data_types(
  con,
  "TraitsDomain"
) %>%
  dplyr::full_join(
    data_comments_traits_domain,
    by = "column_name"
  ) %>%
  plot_table()
```

```{r}
#| label: TraitsDomain scheme structure
include_graphics_absolute_path(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/TraitsDomain.png"
  )
)
```

```{r}
#| label: trait per domain plot

n_traits_per_domain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::distinct(trait_domain_name, trait_name) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

fig_n_traits_per_domain <-
  n_traits_per_domain %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::labs(
    title = "Trait domains",
    x = "",
    y = "Number of traits"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::coord_cartesian(
    ylim = c(0, 7)
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    fill = col_white,
    size = point_size,
    shape = 21,
    col = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = point_size * 2,
    position = ggplot2::position_dodge(0.5)
  )

save_figure_to_render(fig_n_traits_per_domain)
```

### Traits value (`TraitsValue`)

In general, data of functional traits of vegetation taxa follow the same structure of the `Dataset` and `Samples` obtained directly from the `Dataset Source-Types`. Therefore, `TraitsValue` table contains not only the actual measured value of Trait observation but also information about linking information across `Datasets`, `Samples`, and `Taxa`. This comprehensive linkage ensures that each Trait value is accurately associated with its relevant ecological, environmental and taxonomic context.

```{r}
#| label: TraitsValue scheme structure
include_graphics_absolute_path(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/TraitsValue.png"
  )
)
```

```{r}
#| label: TraitsValue variables scheme structure
#| tbl-cap: "Column names and types for table TraitsValue."
data_comments_traits_value <-
  tibble::tribble(
    ~column_name, ~description,
    "trait_id", "ID of a Trait",
    "dataset_id", "ID of a Dataset",
    "sample_id", "ID of a Sample",
    "taxon_id", "ID of a Taxon",
    "trait_value", "Value of specific measured observation of Trait."
  )

get_db_table_data_types(
  con,
  "TraitsValue"
) %>%
  dplyr::full_join(
    data_comments_traits_value,
    by = "column_name"
  ) %>%
  plot_table()
```


```{r}
#| label: trait value occurences plot

n_occurences_per_dommain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsValue"),
    by = "trait_id"
  ) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

fig_n_occurences_per_dommain <-
  n_occurences_per_dommain %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    trait_domain_name = factor(
      trait_domain_name,
      levels = unique(trait_domain_name)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::coord_cartesian(
    ylim = c(10e3, 10e9)
  ) +
  ggplot2::labs(
    title = "Occurences of Trait values",
    x = "",
    y = "Number of occurrences (values)"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    fill = col_white,
    size = point_size,
    shape = 21,
    col = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = point_size * 2,
    position = ggplot2::position_dodge(0.5)
  )

save_figure_to_render(fig_n_occurences_per_dommain)
```

### Traits Reference (`TraitsReference`)

To ensure clarity and reproducibility, each `Trait` in **VegVault** can have additional `References` beyond the general `Dataset` and `Sample` `References`. These `Trait`-specific `References` provide detailed provenance and citation information, supporting rigorous scientific research and enabling users to trace the origins and validation of each trait value. 

```{r}
#| label: TraitsReference variables scheme structure
#| tbl-cap: "Column names and types for table TraitsReference."
data_comments_traits_reference <-
  tibble::tribble(
    ~column_name, ~description,
    "trait_id", "ID of a Trait",
    "reference_id", "ID of a Reference"
  )

get_db_table_data_types(
  con,
  "TraitsReference"
) %>%
  dplyr::full_join(
    data_comments_traits_reference,
    by = "column_name"
  ) %>%
  plot_table()
```

```{r}
#| label: TraitsReference scheme structure
include_graphics_absolute_path(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/TraitsReference.png"
  )
)
```