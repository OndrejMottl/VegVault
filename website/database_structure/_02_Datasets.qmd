# Section II: Internal Database Structure

```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("website/database_structure/_02_Datasets.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

source(
  here::here(
    "R/03_Visualisation/00_Config_quarto.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)

sel_dataset_for_example <- 91256
```

## `Dataset`

The `Dataset` represents the main structure in the **VegVault**, serving as the keystone for organizing and managing data. Here we will explain some, but not all, of the features of the `Dataset`. 

```{r}
#| label: Dataset scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/Datasets.png"
  )
)
```

### `Dataset Type`
The `Dataset Type` defines the most basic classification of each `Dataset`, ensuring that the vast amount of data is categorized systematically. Currently, **VegVault** contains the following types of `Datasets`:

-	`vegetation_plot`: This type includes contemporary vegetation plot data, capturing contemporary vegetation characteristics and distributions.
-	`fossil_pollen_archive`: This type encompasses past vegetation plot data derived from fossil pollen records, providing insights into historical vegetation patterns.
-	`traits`: This type contains functional trait data, detailing specific characteristics of plant species that influence their ecological roles.
-	`gridpoints`: This type holds artificially created `Datasets` to manage abiotic data, here climate and soil information

```{r}
#| label: Dataset Type scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/DatasetTypeID.png"
  )
)
```

```{r}
#| label: Dataset type - plots
n_datasetes_per_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

fig_n_datasetes_per_type <-
  plot_waffle(
    n_datasetes_per_type,
    dataset_type,
    plot_title = "Dataset Type",
    one_point_is = 1e3
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )

save_figure_to_render(fig_n_datasetes_per_type)
```

### `Dataset` `Source-Type`

VegVault maintains the detailed information on the source used to retrieve the original data, thereby enhancing the findability and referencing of primary data sources. Each `Dataset` is derived from a specific `Source-Type` provides detailed information on the source, which was used to retrieve the original data, enhancing the findability and referencing of primary data sources. The current `Source-Types` in **VegVault** include

- **BIEN** - [Botanical Information and Ecology Network](https://bien.nceas.ucsb.edu/bien/)
- **sPlotOpen** - [The open-access version of sPlot](https://idiv-biodiversity.de/en/splot/splotopen.html)
- **TRY** - [TRY Plant Trait Database](https://www.try-db.org/TryWeb/Home.php)
- **FOSSILPOL** - [The workflow that aims to process and standardise global palaeoecological pollen data](https://hope-uib-bio.github.io/FOSSILPOL-website/). Note that we specifically state FOSSILPOL and not Neotoma, as FOSSILPOL not only provides the data but also alters it (e.g, new age-depth models).
- **gridpoints** - artificially created `Datasets` to hold abiotic data 

```{r}
#| label: Dataset Source Type scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/DatasetSourceTypeID.png"
  )
)
```

```{r}
#| label: dataset source type - plots
n_datasetes_per_type_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::group_by(dataset_type, dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

fig_n_datasetes_per_source_type <-
  n_datasetes_per_type_per_source_type %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::mutate(
    n_datasetes_per_type = sum(N)
  ) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(-n_datasetes_per_type, -N) %>%
  dplyr::mutate(
    dataset_type = factor(
      dataset_type,
      levels = unique(dataset_type)
    ),
    dataset_source_type = factor(
      dataset_source_type,
      levels = unique(dataset_source_type)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = dataset_source_type # reorder(dataset_source_type, -N)
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    limits = c(1, 10e6)
  ) +
  ggplot2::labs(
    title = "Dataset Type per Source-Type",
    x = "",
    y = "Number of Datasets"
  ) +
  ggplot2::theme(
    legend.position = "none",
    strip.text = ggplot2::element_text(colour = "white")
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_source_type
  ) +
  ggplot2::facet_wrap(~dataset_type, nrow = 1, scales = "free_x") +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = dataset_source_type, # reorder(dataset_source_type, -N),
      xend = dataset_source_type, # reorder(dataset_source_type, -N),
      yend = 0
    ),
    color = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_source_type
    ),
    size = point_size,
    shape = 21,
    col = col_blue_dark,
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = point_size * 2,
    position = ggplot2::position_dodge(0.5)
  )

save_figure_to_render(fig_n_datasetes_per_source_type)
```

### `Dataset Source`

Each individual `Dataset` from a specific `Dataset` `Source-Type` can have information on the source of the data (i.e. sub-database). This should help to promote better findability of the primary source of data and referencing.

```{r}
#| label: Dataset Source ID scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/DatasetSourcesID.png"
  )
)
```

```{r}
#| label: Dataset ID
n_dataset_sources <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::distinct(dataset_type, data_source_desc) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_total_sources <-
  sum(n_dataset_sources$N)

n_datasetes_per_source <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::group_by(dataset_type, data_source_desc) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup() %>%
  tidyr::drop_na(data_source_desc)
```

Currently, there are `r n_total_sources` sources of datasets.

```{r}
#| label: Dataset ID - plots
fig_n_datasetes_per_source <-
  n_datasetes_per_source %>%
  ggplot2::ggplot(
    ggplot2::aes(
      x = dataset_type,
      y = N,
      fill = dataset_type
    )
  ) +
  ggplot2::geom_violin(
    col = NA
  ) +
  ggplot2::geom_boxplot(
    width = 0.2,
    fill = col_white,
    col = col_blue_dark,
    outlier.shape = NA
  ) +
  ggplot2::geom_point(
    data = n_datasetes_per_source %>%
      dplyr::group_by(dataset_type) %>%
      dplyr::summarise(
        N = median(N)
      ),
    mapping = ggplot2::aes(
      fill = dataset_type
    ),
    shape = 22,
    size = point_size
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Number of Datasets per Dataset Type",
    y = "Number of Datasets",
    x = ""
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  ) +
  ggplot2::theme(
    legend.position = "none"
  )

save_figure_to_render(fig_n_datasetes_per_source)
```

### Sampling Method

Sampling methods vary significantly across the different types of `Datasets` integrated into **VegVault**, reflecting the diverse nature of the data collected. For current vegetation plots, sampling involves standardized plot inventories and surveys that capture detailed vegetation characteristics across various regions. In contrast, fossil pollen data are collected from sediment cores, representing past vegetation and depositional environments. These sampling methods are crucial for understanding the context and limitations of each Dataset Type. Therefore, information on sampling methods is only present for both `vegetation_plot` and `fossil_pollen_archive` `Datasets`, providing metadata that ensures accurate and contextually relevant analyses

```{r}
#| label: Dataset Sampling method scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/SamplingMethodID.png"
  )
)
```

```{r}
#| label: Dataset Sampling method - plots
n_sampling_methods_per_dataset_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "SamplingMethodID"),
    by = "sampling_method_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::distinct(dataset_type, sampling_method_details) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

fig_n_sampling_methods_per_dataset_type <-
  plot_waffle(
    n_sampling_methods_per_dataset_type,
    dataset_type,
    plot_title = "Number of Sampling Method per Datasets Type",
    one_point_is = 1
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )

save_figure_to_render(fig_n_sampling_methods_per_dataset_type)
```

### References

To support robust and transparent scientific research, each `Dataset` in **VegVault** can have multiple references at different levels. The `Dataset` `Source-Type`, `Dataset Source`, and `Sampling Method` can all have their own references, providing detailed provenance and citation information. This multi-level referencing system enhances the traceability and validation of the data. **VegVault** currently includes 706 sources of `Datasets`, each documented to ensure reliability and ease of use. Each dataset can also have one or more direct references to specific data, further ensuring that users can accurately cite and verify the sources of their data. 

```{r}
#| label: Dataset reference method scheme structure
knitr::include_graphics(
  here::here(
    "Outputs/Figures/website/DB_scheme_visualisation/DatasetReference.png"
  )
)
```

This means that one dataset can have one/several references from each of those parts. Let's take a look at an example, of what that could mean in practice.

```{r}
#| label: Dataset reference example
dataset_ref_example <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeReference"),
    by = "data_source_type_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_type_ref = reference_detail
  ) %>%
  dplyr::select(-c(reference_id, mandatory)) %>%
  dplyr::left_join(
    dplyr::tbl(con, "SamplingMethodReference"),
    by = "sampling_method_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    sampling_method_ref = reference_detail
  ) %>%
  dplyr::select(-c(reference_id, mandatory)) %>%
  dplyr::left_join(
    dplyr::tbl(con, "DatasetSourcesReference"),
    by = "data_source_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_ref = reference_detail
  ) %>%
  dplyr::select(-c(reference_id, mandatory)) %>%
  dplyr::collect()

```

We have selected dataset ID: `r as.character(sel_dataset_for_example)`, which is a fossil pollen archive. Therefore, it has the reference of the *Dataser Source-Type*: 
 
 - *`r dataset_ref_example$source_type_ref`* 

and reference for the individual dataset: 

- *`r dataset_ref_example$source_ref`*